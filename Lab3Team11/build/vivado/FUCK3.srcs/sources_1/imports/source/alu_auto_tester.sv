/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_auto_tester #(
        parameter CLK_FREQ = 10'h3e8
    ) (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h1c;
    localparam SEVEN_SEG_DIV = 5'h10;
    logic [31:0] result;
    logic slow_clock;
    logic M_rom_s0;
    logic M_rom_s1;
    logic M_rom_s2;
    logic M_rom_s3;
    logic [31:0] M_rom_out;
    logic [31:0] M_rom_a;
    logic [31:0] M_rom_b;
    logic [5:0] M_rom_alufn;
    
    autoROM rom (
        .s0(M_rom_s0),
        .s1(M_rom_s1),
        .s2(M_rom_s2),
        .s3(M_rom_s3),
        .out(M_rom_out),
        .a(M_rom_a),
        .b(M_rom_b),
        .alufn(M_rom_alufn)
    );
    
    
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic [3:0] M_alu_z;
    logic [3:0] M_alu_v;
    logic [3:0] M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    localparam CLKFREQ = 27'h5f5e100;
    localparam E_States_IDLE = 3'h0;
    localparam E_States_RUN = 3'h1;
    localparam E_States_SHOWA = 3'h2;
    localparam E_States_SHOWB = 3'h3;
    localparam E_States_SHOWALUFN = 3'h4;
    localparam E_States_SHOWRESULT = 3'h5;
    localparam E_States_STOP = 3'h6;
    localparam _MP_RISE_1511639995 = 1'h1;
    localparam _MP_FALL_1511639995 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1511639995),
        .FALL(_MP_FALL_1511639995)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_486279499 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_486279499 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_486279499;
    
    generate
        for (idx_0_486279499 = 0; idx_0_486279499 < 5; idx_0_486279499 = idx_0_486279499 + 1) begin: forLoop_idx_0_486279499
            edge_detector #(
                .RISE(_MP_RISE_486279499[idx_0_486279499]),
                .FALL(_MP_FALL_486279499[idx_0_486279499])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_486279499]),
                .out(M_io_button_edge_out[idx_0_486279499])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][26:0] _MP_CLK_FREQ_755943825 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_755943825 = 5'h14;
    localparam _MP_NUM_SYNC_755943825 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_755943825;
    
    generate
        for (idx_0_755943825 = 0; idx_0_755943825 < 5; idx_0_755943825 = idx_0_755943825 + 1) begin: forLoop_idx_0_755943825
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_755943825[idx_0_755943825]),
                .MIN_DELAY(_MP_MIN_DELAY_755943825),
                .NUM_SYNC(_MP_NUM_SYNC_755943825)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_755943825]),
                .out(M_io_button_cond_out[idx_0_755943825])
            );
        end
    endgenerate
    
    
    logic D_slow_clock_enable_d, D_slow_clock_enable_q = 0;
    logic [31:0] D_counter_d, D_counter_q = 0;
    logic [4:0] D_speed_pointer_d, D_speed_pointer_q = 5'h1c;
    logic [2:0] D_states_d, D_states_q = 3'h0;
    localparam _MP_DIGITS_16934508 = 3'h4;
    localparam _MP_DIV_16934508 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_16934508),
        .DIV(_MP_DIV_16934508)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    logic [31:0] D_currenta_d, D_currenta_q = 0;
    logic [31:0] D_currentb_d, D_currentb_q = 0;
    logic [5:0] D_currentalufn_d, D_currentalufn_q = 0;
    always @* begin
        D_counter_d = D_counter_q;
        D_speed_pointer_d = D_speed_pointer_q;
        D_currenta_d = D_currenta_q;
        D_currentb_d = D_currentb_q;
        D_currentalufn_d = D_currentalufn_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_states_d = D_states_q;
        
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        M_seg_values = {{{4'h0}}, {M_alu_z}, {M_alu_v}, {M_alu_n}};
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
        led = M_alu_out[3'h7:1'h0];
        io_led[2'h2:1'h0] = {{M_alu_out[5'h1f:5'h18]}, {M_alu_out[5'h17:5'h10]}, {M_alu_out[4'hf:4'h8]}};
        slow_clock = D_counter_q[D_speed_pointer_q];
        D_counter_d = D_counter_q + 1'h1;
        D_speed_pointer_d = D_speed_pointer_q;
        D_currenta_d = D_currenta_q;
        D_currentb_d = D_currentb_q;
        D_currentalufn_d = D_currentalufn_q;
        result = 1'h0;
        M_slow_clock_edge_in = slow_clock;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        
        case (D_slow_clock_enable_q)
            1'h0: begin
                M_slow_clock_edge_in = 1'h0;
            end
            1'h1: begin
                M_slow_clock_edge_in = slow_clock;
            end
            default: begin
                M_slow_clock_edge_in = 1'h0;
            end
        endcase
        M_rom_s0 = io_dip[2'h2][1'h0];
        M_rom_s1 = io_dip[2'h2][1'h1];
        M_rom_s2 = io_dip[2'h2][2'h2];
        M_rom_s3 = io_dip[2'h2][2'h3];
        M_alu_a = D_currenta_q;
        M_alu_b = D_currentb_q;
        M_alu_alufn = D_currentalufn_q;
        
        case (D_states_q)
            3'h0: begin
                M_seg_values = {{4'ha, 4'hb, 4'hc, 4'hd}};
                if (M_slow_clock_edge_out) begin
                    D_states_d = 3'h2;
                end else begin
                    if (M_io_button_edge_out[1'h1]) begin
                        if (~(|D_slow_clock_enable_q)) begin
                            D_states_d = 3'h1;
                        end
                    end
                end
            end
            3'h1: begin
                D_slow_clock_enable_d = 1'h1;
                D_states_d = 3'h0;
            end
            3'h2: begin
                D_currenta_d = M_rom_a;
                M_seg_values = {{4'h0, 4'h0, 4'h0, 4'ha}};
                led = D_currenta_q[3'h7:1'h0];
                io_led[2'h2:1'h0] = {{D_currenta_q[5'h1f:5'h18]}, {D_currenta_q[5'h17:5'h10]}, {D_currenta_q[4'hf:4'h8]}};
                if (M_slow_clock_edge_out) begin
                    D_states_d = 3'h3;
                end
            end
            3'h3: begin
                D_currentb_d = M_rom_b;
                M_seg_values = {{4'h0, 4'h0, 4'h0, 4'hb}};
                led = D_currentb_q[3'h7:1'h0];
                io_led[2'h2:1'h0] = {{D_currentb_q[5'h1f:5'h18]}, {D_currentb_q[5'h17:5'h10]}, {D_currentb_q[4'hf:4'h8]}};
                if (M_slow_clock_edge_out) begin
                    D_states_d = 3'h4;
                end
            end
            3'h4: begin
                D_currentalufn_d = M_rom_alufn;
                M_seg_values = {{4'h0, 4'h0, 4'h0, 4'hc}};
                io_led[1'h1:1'h0] = {{8'h0, 8'h0}};
                led[3'h7:1'h0] = 8'h0;
                io_led[2'h2][3'h7] = 1'h0;
                io_led[2'h2][3'h6] = 1'h0;
                io_led[2'h2][3'h5:1'h0] = D_currentalufn_q;
                if (M_slow_clock_edge_out) begin
                    D_states_d = 3'h5;
                end
            end
            3'h5: begin
                result = M_alu_out;
                if (io_dip[2'h2][3'h6]) begin
                    result[1'h0] = ~result[1'h0];
                end
                if (M_rom_out != result) begin
                    M_seg_values = {{4'he, 4'he, 4'he, 4'he}};
                end else begin
                    M_seg_values = {{{4'hc}}, {M_alu_z}, {M_alu_v}, {M_alu_n}};
                end
                if (M_slow_clock_edge_out) begin
                    D_states_d = 3'h6;
                end
            end
            3'h6: begin
                D_slow_clock_enable_d = 1'h0;
                D_states_d = 3'h0;
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_slow_clock_enable_q <= 0;
            D_counter_q <= 0;
            D_speed_pointer_q <= 5'h1c;
            D_states_q <= 3'h0;
            D_currenta_q <= 0;
            D_currentb_q <= 0;
            D_currentalufn_q <= 0;
        end else begin
            D_slow_clock_enable_q <= D_slow_clock_enable_d;
            D_counter_q <= D_counter_d;
            D_speed_pointer_q <= D_speed_pointer_d;
            D_states_q <= D_states_d;
            D_currenta_q <= D_currenta_d;
            D_currentb_q <= D_currentb_d;
            D_currentalufn_q <= D_currentalufn_d;
        end
    end
endmodule